#
# 编译主程序,请勿修改文件名称（compile.yml）
#


name: 编译主程序
on:
  push:
    branches:
      - main
    paths:
      - 'build/Immortalwrt/relevance/start'

env:
  GIT_REPOSITORY: ${{github.repository}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai
  DIY_WORK: /opt/diy_work

jobs:
  build:
    name: 编译 "${{matrix.target}}"
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    
    env:
      FOLDER_NAME: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
       target: [Immortalwrt]

    steps:
    - name: 准备结束
      uses: actions/checkout@v4

    - name: 检测密匙/文件/版本
      uses: 281677160/common@mishi
  
        
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |   
        sudo bash -c 'bash <(curl -fsSL https://github.com/281677160/common/raw/main/custom/ubuntu.sh)'
        sudo timedatectl set-timezone "$TZ"
        # 创建持久化目录
        sudo mkdir -p ${{ env.DIY_WORK }}
        sudo chown -R ${USER}:${GROUPS} ${{ env.DIY_WORK }}
        sudo chmod -R 755 ${{ env.DIY_WORK }}    

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 1024
        swap-size-mb: 4096
        remove-dotnet: 'true'
        overprovision-lvm: 'true'
        build-mount-path: '/opt'
        pv-loop-path: '/pv.img'
        tmp-pv-loop-path: '/tmp/tmp-pv.img'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: 验证工作区权限
      run: |
        echo "工作区路径: ${{ env.DIY_WORK }}"
        # 确保目录存在
        sudo mkdir -p ${{ env.DIY_WORK }}
        sudo chown -R ${USER}:${GROUPS} ${{ env.DIY_WORK }}
        ls -ld ${{ env.DIY_WORK }}
        touch ${{ env.DIY_WORK }}/testfile
        echo "权限验证成功"

    - name: 准备结束
      uses: actions/checkout@v4        

    - name: 下载"${{matrix.target}}"源码
      working-directory: ${{ env.DIY_WORK }}
      run: |
        echo "Free space:"
        df -h         
        git clone -q -b "${REPO_BRANCH}" --single-branch "${REPO_URL}" openwrt
        ln -sf ${{ env.DIY_WORK }}/openwrt ${GITHUB_WORKSPACE}/openwrt
        bash ${{ env.COMMON_SH }} Diy_feedsconf
    
    - name: 公告
      continue-on-error: true
      uses: 281677160/common@message
 
    - name: 运行自定义文件和其他
      uses: 281677160/common@need
        
    - name: 编译信息
      continue-on-error: true
      if: env.COMPILATION_INFORMATION == 'true'
      uses: 281677160/common@message
        
    - name: 缓存加速
      if: env.CACHEWRTBUILD_SWITCH == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: "${{ env.TARGET_PROFILE }}"
        prefix: ${{ github.workspace }}/openwrt
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make download -j8
    
    - name: 开始编译固件
      id: compile
      if: steps.package.outcome == 'success'
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s

    - name: 自动打包armsr_rootfs_tar_gz
      if: steps.compile.outcome == 'success' && env.ONLINE_FIRMWARE == 'true'
      uses: 281677160/common@aarch

    - name: 整理固件文件夹(需配合diy-part.sh设定使用)
      continue-on-error: true
      if: steps.compile.outcome == 'success'
      run: |
        cd openwrt
        bash ${{ env.COMMON_SH }} Diy_firmware

    - name: 发送[在线更新固件]至云端
      continue-on-error: true
      if: steps.compile.outcome == 'success' && env.UPDATE_FIRMWARE_ONLINE == 'true'
      uses: 281677160/common@cloud
        
    - name: 上传,发布,信息通知
      if: steps.compile.outcome == 'success'
      uses: 281677160/common@uploads
